#!/bin/bash
set -e
set -o pipefail

BUILDPACK_ROOT=$(cd $(dirname "$0")/..; pwd)
for filename in $BUILDPACK_ROOT/lib/*.bash; do source $filename; done

BUILD_ROOT=$(heroku-dir $1)
PHP_ROOT=$(heroku-vendor-dir php $1)
NGINX_ROOT=$(heroku-vendor-dir nginx $1)

mkdir -p $BUILD_ROOT

echo 'Downloading dependencies' | heroku-notice
echo "php v${PHP_VERSION}" | heroku-indent
s3-download php $PHP_VERSION $PHP_ROOT

echo "nginx v${NGINX_VERSION}" | heroku-indent
s3-download nginx $NGINX_VERSION $NGINX_ROOT

echo "Copying configuration" | heroku-notice
rm -rf ${BUILD_ROOT}/etc
cp -r ${BUILDPACK_ROOT}/etc ${BUILD_ROOT}/etc

if [ -f "${1}/composer.json" ]; then
    echo "Installing composer dependencies" | heroku-notice
    echo "Downloading composer binary" | heroku-indent
    curl -s "http://getcomposer.org/composer.phar" -o composer.phar
    COMPOSER="$(pwd)/composer.phar"
    pushd $1 > /dev/null
    ${PHP_ROOT}/bin/php $COMPOSER install --optimize-autoloader | heroku-indent
    popd > /dev/null
fi

echo "Generating boot script" | heroku-notice

# Reset roots to production paths for script generation ...
PHP_ROOT=$(heroku-vendor-dir php)
NGINX_ROOT=$(heroku-vendor-dir nginx)
DEPLOY_ROOT=$(heroku-dir)

cat > ${BUILD_ROOT}/start-web <<EOF
#!/usr/bin/env bash
echo "Preparing filesystem ..."
touch ${NGINX_ROOT}/logs/http.log
mkdir -p /tmp/client_body /tmp/fastcgi

echo "Generating nginx.conf ..."
${PHP_ROOT}/bin/php ${DEPLOY_ROOT}/etc/nginx.conf.php > ${NGINX_ROOT}/conf/nginx.conf

echo "Starting php-fpm ${PHP_VERSION}..."
${PHP_ROOT}/sbin/php-fpm -y ${DEPLOY_ROOT}/etc/php-fpm.conf -c ${DEPLOY_ROOT}/etc/php.ini

echo "Starting nginx ${NGINX_VERSION}..."
tail -f -n 0 ${NGINX_ROOT}/logs/http.log &
${NGINX_ROOT}/sbin/nginx -c ${NGINX_ROOT}/conf/nginx.conf
EOF

chmod +x $BUILD_ROOT/start-web
